"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEntryPointsForPackage = void 0;
const fs = __importStar(require("fs"));
const path_1 = require("path");
const paths_1 = require("./paths");
const validation_1 = require("./validation");
const fs_1 = require("./fs");
function getEntryPointsForPackage(logger, options) {
    const entryPoints = options.getValue("entryPoints");
    if (entryPoints.length > 1) {
        logger.warn(`In "package" mode, only the first entry point will be used.`);
    }
    const entryDir = entryPoints[0] ?? process.cwd();
    const packageJsonPath = (0, path_1.join)(entryDir, "package.json");
    if (!fs.existsSync(packageJsonPath)) {
        logger.error(`No package.json file found in ${(0, paths_1.nicePath)(entryDir)}, required for package mode.`);
        return;
    }
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
    if (!(0, validation_1.validate)({ name: String, version: String }, packageJson)) {
        logger.error(`${(0, paths_1.nicePath)(packageJsonPath)} must contain both "name" and "version" fields for package mode.`);
        return;
    }
    const packageExports = getPackageExports(entryDir, packageJson, options);
    return {
        packageName: packageJson.name,
        version: packageJson.version,
        // readmeFile: "",
        entryPoints: packageExports,
    };
}
exports.getEntryPointsForPackage = getEntryPointsForPackage;
function getPackageExports(packageDir, packageJson, options) {
    const jsEntryPoints = [];
    function addEntryPoint(name, exp) {
        if (typeof exp === "string") {
            jsEntryPoints.push({ name, path: (0, path_1.join)(packageDir, exp) });
        }
        else if ((0, validation_1.validate)({ typedoc: String }, exp)) {
            jsEntryPoints.push({ name, path: (0, path_1.join)(packageDir, exp.typedoc) });
        }
        else {
            for (const key of ["import", "export", "default", "types"]) {
                if ((0, validation_1.validate)({ [key]: String }, exp)) {
                    jsEntryPoints.push({
                        name,
                        path: (0, path_1.join)(packageDir, exp[key]),
                    });
                }
            }
        }
    }
    if ((0, validation_1.validate)({ exports: String }, packageJson)) {
        jsEntryPoints.push({
            name: packageJson.name,
            path: (0, path_1.join)(packageDir, packageJson.exports),
        });
    }
    else if ((0, validation_1.validate)({ exports: [Array, String] }, packageJson)) {
        jsEntryPoints.push(...packageJson.exports.map((ex) => ({
            name: path_1.posix.join(packageJson.name, ex),
            path: (0, path_1.join)(packageDir, ex),
        })));
    }
    else if ((0, validation_1.validate)({ exports: {} }, packageJson)) {
        if (Object.keys(packageJson.exports).every((k) => k.startsWith("."))) {
            for (const [key, val] of Object.entries(packageJson.exports)) {
                addEntryPoint(path_1.posix.join(packageJson.name, key), val);
            }
        }
        else {
            // Conditional exports with sugar for a single export
            // https://nodejs.org/api/packages.html#exports-sugar
            addEntryPoint(packageJson.name, packageJson.exports);
        }
    }
    else if ((0, validation_1.validate)({ main: String }, packageJson)) {
        jsEntryPoints.push({
            name: packageJson.name,
            path: (0, path_1.join)(packageDir, packageJson.main),
        });
    }
    else {
        jsEntryPoints.push({
            name: packageJson.name,
            path: (0, path_1.join)(packageDir, "index.js"),
        });
    }
    const fileNames = options.getFileNames();
    const co = options.getCompilerOptions();
    // Entry points are JS files, but this is a compiled TS project, so we
    // need to use source maps or outDir (+maybe rootDir) to figure out what
    // TS file the JS file came from.
    const tsEntryPoints = [];
    const outDir = co.outDir || packageDir;
    const rootDir = co.rootDir || (0, fs_1.getCommonDirectory)(fileNames);
    for (const entry of jsEntryPoints) {
        // #1567 - if someone publishes TS expecting user to compile, or
        // if allowJs is set and this js file is included in the project.
        if (fileNames.includes(entry.path)) {
            tsEntryPoints.push(entry);
            continue;
        }
        const entryDir = (0, path_1.dirname)((0, path_1.join)(rootDir, (0, path_1.relative)(outDir, entry.path)));
        const ext = (0, path_1.extname)(entry.path);
        switch (ext) {
            case ".mjs":
                tsEntryPoints.push({
                    name: entry.name,
                    path: (0, fs_1.normalizePath)((0, path_1.join)(entryDir, (0, path_1.basename)(entry.path, ext) + ".mts")),
                });
                break;
            case ".cjs":
                tsEntryPoints.push({
                    name: entry.name,
                    path: (0, fs_1.normalizePath)((0, path_1.join)(entryDir, (0, path_1.basename)(entry.path, ext) + ".cts")),
                });
                break;
            case ".js":
                const tsName = (0, fs_1.normalizePath)((0, path_1.join)(entryDir, (0, path_1.basename)(entry.path, ext) + ".ts"));
                tsEntryPoints.push({ name: entry.name, path: tsName });
                tsEntryPoints.push({ name: entry.name, path: tsName + "x" });
                break;
        }
    }
    return tsEntryPoints.filter(({ path }) => {
        return fileNames.includes(path);
    });
}
//# sourceMappingURL=package.js.map